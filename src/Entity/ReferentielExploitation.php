<?php

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\File;

/**
 * Class ReferentielExploitation.
 * @ORM\Table(name="referentiel_exploitation")
 * @ORM\Entity(repositoryClass="App\Repository\ReferentielExploitationRepository")
 */
class ReferentielExploitation
{
    /**
     * The identifier of the referentiel_exploitation.   TIPF
     *
     * @var int
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id = null;

    /**
     * The label of the referentiel_exploitation.
     *
     * @var string
     * @ORM\Column(type="string")
     */
    private $label;

    /**
     * The name of the database linked to the referentiel_exploitation.
     *
     * @var string
     * @ORM\Column(type="string")
     */
    private $databaseName;

    /**
     * The code of the referentiel_exploitation.
     *
     * @var string
     * @ORM\Column(type="string")
     */
    private $code;

    /**
     * The code of the referentiel_exploitation.
     *
     * @var string
     * @ORM\Column(type="string")
     */
    private $joncture = "ORTR_TIPF";

    /**
     * @ORM\Column(name="label_extranet", type="string" )
     */
    private $labelExtranet;

    /**
     * @var ArrayCollection | Client[]
     * @ORM\ManyToMany(targetEntity="App\Entity\Client", mappedBy="referentielExploitation")
     */
    private $clients;

    /**
     * @var ArrayCollection | Agency[]
     * @ORM\ManyToMany(targetEntity="App\Entity\Agency", mappedBy="referentielExploitation")
     */
    private $agencies;

    /**
     * ReferentielExploitation constructor.
     */
    public function __construct()
    {
        $this->clients = new ArrayCollection();
        $this->agencies = new ArrayCollection();
    }

    /**
     * Get the id of the referentiel_exploitation.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * {@inheritdoc}
     */
    public function __toString()
    {
        return $this->getLabelExtranet();
    }

    /**
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }

    /**
     * @param string $label
     */
    public function setLabel(string $label): void
    {
        $this->label = $label;
    }

    /**
     * @return string
     */
    public function getDatabaseName()
    {
        return $this->databaseName;
    }

    /**
     * @param string $databaseName
     */
    public function setDatabaseName(string $databaseName): void
    {
        $this->databaseName = $databaseName;
    }

    /**
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * @param string $code
     */
    public function setCode(string $code): void
    {
        $this->code = $code;
    }

    /**
     * @return string
     */
    public function getJoncture()
    {
        return $this->joncture;
    }

    /**
     * @param string $joncture
     */
    public function setJoncture(string $joncture): void
    {
        $this->joncture = $joncture;
    }

    /**
     * @return mixed
     */
    public function getLabelExtranet()
    {
        return $this->labelExtranet;
    }

    /**
     * @param mixed $labelExtranet
     * @return ReferentielExploitation
     */
    public function setLabelExtranet($labelExtranet)
    {
        $this->labelExtranet = $labelExtranet;

        return $this;
    }

    /**
     * @return Client[]
     */
    public function getClients()
    {
        return $this->clients;
    }

    /**
     * @param Client $client
     * @return bool
     */
    public function addClient(Client $client)
    {
        if($this->clients->contains($client)) {
            return false;
        }
        $this->clients->add($client);
        $client->addReferentielExploitation($this);
        return true;
    }

    /**
     * @return Agency[]
     */
    public function getAgencies()
    {
        return $this->agencies;
    }

    /**
     * @param Agency $agency
     * @return bool
     */
    public function addAgencies(Agency $agency)
    {
        if($this->agencies->contains($agency)) {
            return false;
        }
        $this->agencies->add($agency);
        $agency->addReferentielExploitation($this);
        return true;
    }


}
