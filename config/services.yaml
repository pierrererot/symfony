# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'
    app.path.product_images: /uploads/images/products
    app.path.user_contracts: /uploads/files/user/contracts

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php,NotNullCondition.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Security\User\ExtranetUserProvider:
        public: false
        arguments:
            - '@doctrine'
            - 'App\Entity\Users'
            -
                login: 'login'
                auth_method: ''


    App\Security\ExtranetAuthenticationProvider:
        public: false
        arguments: ['@App\Security\User\ExtranetUserProvider', '','','','', '@App\Service\Ldap\LdapService']

    App\Service\Ldap\LdapService:
        autowire: false
        arguments:
            $host1: 'SERVDC1.domaine.lan'
            $host2: 'SERVDC3.domaine.lan'
            $dn: 'domaine.lan'

    App\Form\Type\OrdersManualType:
            class: App\Form\Type\OrdersManualType
            arguments: ["@doctrine", "@security.token_storage"]

    App\EventListener\BeforeRequestListener:
        arguments: ["@doctrine.orm.entity_manager", "@security.token_storage", "@annotation_reader"]
        tags:
        -
            name: kernel.event_listener
            event: kernel.request
            method: onKernelRequest

    App\Service\SessionFilterService:
        arguments: ["@doctrine.orm.entity_manager", "@security.token_storage", "@annotation_reader"]
